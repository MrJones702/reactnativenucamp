. . .
import * as Notifications from 'expo-notifications';
. . .
                    text: 'OK', 
                    onPress: () => {
                        this.presentLocalNotification(this.state.date.toLocaleDateString('en-US'));
                        this.resetForm();
                    }
. . .

    async presentLocalNotification(date) {
        function sendNotification() {
            Notifications.setNotificationHandler({
                handleNotification: async () => ({
                    shouldShowAlert: true
                })
            });

            Notifications.scheduleNotificationAsync({
                content: {
                    title: 'Your Campsite Reservation Search',
                    body: `Search for ${date} requested`
                },
                trigger: null
            });
        }

        let permissions = await Notifications.getPermissionsAsync();
        if (!permissions.granted) {
            permissions = await Notifications.requestPermissionsAsync();
        }
        if (permissions.granted) {
            sendNotification();
        }
    }

    render() {
        return (    
. . .

-expo install expo-notifications@~0.3.3
-In this exercise, you learned to configure your app to use the Notifications API from Expo SDK to generate an immediate notification to your device. While doing so, you were also introduced to using the new ES8 syntax of await/async to handle promises. 
(in the Reservation comp)




11) this syntax is another way to handle promises... async/await
the reasons we want to use async code and promises is because we'll need to request permissions from this device and wait for those permissions to be sent back to our app before we can continue. 
To do this we'll create an async method (or function) using the keyword async... then giviing it a function name... 
Async function is a special function that always returns a promise
We'll call the function presentLocalNotification nd give it a parameter of date... this will be the requested reservation date. 
we dont wont to push the notification right away because we have to check permissions so we put the function inside another function.

12) function sendNotification with no parameters.. 

13)now the default behavior is for local notifications to not show any alerts... to override this we use notifications.setNotificationHandler method... which is provided by the notifications API for this very purpose... 

14-16)  handleNotification: async () => ({
            shouldShowAlert: true
        })
        the documentation says to set up the notificationHandler in this way to show alerts .. 

19-25) notifications.scheduleNotificationAsync is provided by notifications API... we pass to this an object that holds the content object which holds the title of the notification and the body of the notification. make sure to use back ticks not quotes for the body in order to use JS template literal syntax... we passed in the same date that was passed in the async function on line 11) 
trigger: null => the notification will fire immediately.. trigger can also be used to schedule the notification in the future.. Ex) you can give the trigger a time value like 30000 miliseconds in the future.. or even to reoccur.. but first we need to make sure we have permissions

The notifications API provides us a way to check if we already have permissions and a way to request permissions if needed..  
first check if we have permissions... 
28) we declare a variable named permissions and assign to it the value returned from saying: 
await Notifications.getPermissionsAsync()
this await keyword is a JS ES8 keyword that can only be used inside an async function (a function that we declared using the async keyword instead of the usual function keyword)
await is a lot like .then()... u use it followed by a promise. In this case we already know that Notifications.getPermissionsAsync(); will check to see if we already have permissions from the device and it will return a promise that will fulfill w/ the result of that check... using this method we can effectively combine it with the if statements like 29-34) where we direct what we want . ... to request permissions if needed and if we already have them then to call that function we created sendNotification line 12)

5-8) is where we pass in the date(taken from the components state)(toLocaleDateString is simply to format it) and call the function we create with async...

Local Notifications are generated from the client-side;
Push Notifications are generated from the server-side (but still use the same mechanism to display the notification on the client side) 

The expo notifications API provides access to both push(remote) notifications and local Notifications
notifications can be sent immediately or schedule for a later time. Either once or on a recurring notification. 

Expo Notifications API  
    Notifications.setNotificationHandler(...)
        -sets what to do w/ a notification that is received when the app is in foreground (default: does not show it)
    Notifications.scheduleLocalNotificationAsync(...)
        -schedules a local notification to fire immediately or in the future, optionally repeating at a given interval
    (BOTH of these take an object as an argument... )

We will need to request permission to generate notifications from the underlying OS.
Notifications.getPermissionsAsync()
Notifications.requestPermissionsAsync()
Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! Code!!!! 


