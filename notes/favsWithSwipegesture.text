import React, { Component } from 'react';
import { FlatList, View, Text, StyleSheet } from 'react-native';
import { ListItem } from 'react-native-elements';
import { connect } from 'react-redux';
import { Loading } from './LoadingComponent';
import { baseUrl } from '../shared/baseUrl';
import { SwipeRow } from 'react-native-swipe-list-view';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { deleteFavorite } from '../redux/ActionCreators';

const mapDispatchToProps = {
    deleteFavorite: campsiteId => deleteFavorite(campsiteId)
};

const mapStateToProps = state => {
    return {
        campsites: state.campsites,
        favorites: state.favorites
    };
};

class Favorites extends Component {

    static navigationOptions ={
        title: 'My Favorites'
    }

    render() {
        const {navigate} = this.props.navigation;
        const renderFavoriteItem = ({item}) => {
            return(
                <SwipeRow rightOpenValue={-100} style={styles.swipeRow}>
                    <View style={styles.deleteView}>
                        <TouchableOpacity
                        style={styles.deleteTouchable}
                        onPress={()=> this.props.deleteFavorite(item.id)}
                    >
                        <Text style={styles.deleteText}>Delete</Text>
                        </TouchableOpacity>
                    </View>
                    <View>
                        <ListItem
                            title={item.name}
                            subtitle={item.description}
                            leftAvatar={{source: {uri: baseUrl + item.image}}}
                            onPress={()=> navigate('CampsiteInfo', {campsiteId: item.id})}
                        />
                    </View>
                </SwipeRow>
            );
        };

        if (this.props.campsites.isLoading) {
            return <Loading/>;
        }
        if (this.props.campsites.errMess) {
            return (
                <View>
                    <Text>{this.props.campsites.errMess}</Text>
                </View>
            );
        }
        return (
            <FlatList
                data={this.props.campsites.campsites.filter(
                    campsite=> this.props.favorites.includes(campsite.id)
                )}
                renderItem={renderFavoriteItem}
                keyExtractor={item => item.id.toString()}
            />
        );
    }
}

const styles= StyleSheet.create({
    deleteView: {
        flexDirection: 'row',
        justifyContent: 'flex-end',
        alignItems: 'center',
        flex: 1
    },
    deleteTouchable: {
        backgroundColor: 'red',
        height: '100%',
        justifyContent: 'center'
    },
    deleteText: {
        color: 'white',
        fontWeight: '700',
        textAlign: 'center',
        fontSize: 16,
        width: 100
    }
});

export default connect(mapStateToProps)(Favorites);

NOTES !!!!!!! Notes !!!!!!!! 

import { SwipeRow } from 'react-native-swipe-list-view';

import { TouchableOpacity } from 'react-native-gesture-handler';

32) SwipeRow allows us to make the components with/in it have the swipe capabilities. in this case the ListItem 
rightOpenValue => means the swipeRow will open on the right side which requires a negative integer whose absolute value represents the number of pixels the user would have to swipe in order for it to open... 
inside SwipeRow we must set up 2 view components/ thats the the swipeRow expects... W/ the first view being the hidden view.. The 2md view should be the default view that u see before the swipe.. 

TouchableOpacity comes with an onPress prop which we give the deleteFavorite action (whatever we want to happen) using the item.id... and the text will act as a label.. 

