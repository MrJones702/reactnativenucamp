import React, { Component } from 'react';
import { FlatList, View, Text } from 'react-native';
import { ListItem } from 'react-native-elements';
import { connect } from 'react-redux';
import { Loading } from './LoadingComponent';
import { baseUrl } from '../shared/baseUrl';

const mapStateToProps = state => {
    return {
        campsites: state.campsites,
        favorites: state.favorites
    };
};

class Favorites extends Component {

    static navigationOptions ={
        title: 'My Favorites'
    }

    render() {
        const {navigate} = this.props.navigation;
        const renderFavoriteItem = ({item}) => {
            return(
                <ListItem
                    title={item.name}
                    subtitle={item.description}
                    leftAvatar={{source: {uri: baseUrl + item.image}}}
                    onPress={()=> navigate('CampsiteInfo', {campsiteId: item.id})}
                />
            );
        };

        if (this.props.campsites.isLoading) {
            return <Loading/>;
        }
        if (this.props.campsites.errMess) {
            return (
                <View>
                    <Text>{this.props.campsites.errMess</Text>
                </View>
            );
        }
        return (
            <FlatList
                data={this.props.campsites.campsites.filter(
                    campsite=> this.props.favorites.includes(campsite.id)
                )}
                renderItem={renderFavoriteItem}
                keyExtractor={item => item.id.toString()}
            />
        );
    }
}

export default connect(mapStateToProps)(Favorites);

NOTES !!!!!!! 

34) checking to see if the campsites data is still Loading

45) data prop contains the array of campsites to render just like in the directory component but in this case we are filtering the array of campsites then comparing it with the array of favorited campsites... and only take the matches out to create yet another array of campsites that are favorited(if the include the same id)... 

22) because we will be setting this component up as a navigator we have access to the navigation prop... we destructure the navigate function like so... 

23){item} is a default method to destructure out the current item in the array... 

29) onPress={()=> navigate('CampsiteInfo', {campsiteId: item.id})} ..... passing this call back that contains the navigate function which we route to the 'CampsiteInfo' screen and pass the campsiteId as a parameter... 